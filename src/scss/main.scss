$primary-gray: #dde7ea;
$secondary-grey: #3c4042;
$tertiary-grey: #60777d;

$font-primary: 'Alata', sans-serif;
$font-highlight: 'Alfa Slab One', cursive;

$font-size-content: 14px;
$font-size-title: 22px; 
$font-size-subtitle: 18px; 

body {
  background: $primary-gray;
  font-family: $font-primary;
  
  h2, p, * {
    color: $secondary-grey;
  }
}

.accordion-item {
  background: white;
  border-radius: 5px;
  padding: 15px;
  box-shadow: 0 0 0 1px #ececec;
}

.step {
  background-color: white;
  box-shadow: 0 0 0 1px rgba(236,236,236,1);
  opacity: 1;
  transition: box-shadow .2s, opacity .4s;
  border-radius: 5px; 
  margin-bottom: 15px;
  padding: 20px 25px 5px;
  cursor: pointer;

  &:hover {
    box-shadow: 0 4px 10px 0 rgba(0, 0, 0, .11);
  }
}

.title {
  font-size: $font-size-title;
  & > .subtitle {
    color: #6c757d;
  }
}

.subtitle {
  font-size: $font-size-subtitle;
}

.question {
  margin-top: 20px;
}

.questions-container {
  padding: 0 60px 30px;
  counter-reset: counter;
}

.question-title::before {
  counter-increment: counter;
  content: counter(counter, lower-latin) ". ";
}

/*
=====
CORE STYLES
=====
*/

.toggle{
  --uiToggleSize: var(--toggleSize, 1.25rem);
  --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
  --uiToggleColor: var(--toggleColor, #222);

  display: var(--toggleDisplay, inline-flex);
  position: relative;
  outline: none;
  flex-flow: column;
}

.toggle__input {
  /*
    The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
  */
  width: var(--uiToggleSize);
  height: var(--uiToggleSize);
  opacity: 0;
  
  position: absolute;
  top: 0;
  left: 0;
  margin: 0;
  outline: none;
}

/*
 1. Calculation of the gap for the custom checkbox
*/

.toggle__label {
  display: inline-flex;
  min-height: var(--uiToggleSize);
  padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));
  align-items: center;
  

  &.title {
    font-size: 24px;
    flex-flow: column;
    align-items: baseline;
  }
}

.toggle__input:not(:disabled) ~ .toggle__label {
  cursor: pointer;
}

.input-expand {
  //max-height: 0;
  //overflow: hidden;
  transition: max-height 0.5s ease-out;
}

// .toggle__input:checked ~ .input-expand {
//   max-height: 500px;
//   transition: max-height 0.5s ease-in;
// }

/*
1. Ems helps to calculate size of the checkbox
*/

.page__toggle > .toggle {
  width: 100%;
}

.toggle__label::before, 
.toggle__label::after {
  content: "";
  box-sizing: border-box;  
  width: 1em;
  height: 1em;
  font-size: var(--uiToggleSize); /* 1 */

  position: absolute;
  left: 0;
  top: 0;
}

.toggle__label::before {
  border: var(--uiToggleBorderWidth) solid var(--uiToggleColor);
  z-index: 2;
}

.toggle__input:not(:disabled) ~ .toggle__label::after {
  background-color: var(--uiToggleColor);
  opacity: 0;
}

.toggle__input:not(:disabled):checked ~ .toggle__label::after {
  opacity: 1;
}

.toggle__text{
  margin-top: auto;
  margin-bottom: auto;
}

/*
The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle

1. Ems helps to calculate size and position of the arrow
*/

.toggle__input:not(:disabled) ~ .toggle__label .toggle__text::before {
  content: "";
  width: 0;
  height: 0;
  font-size: var(--uiToggleSize); /* 1 */

  border-left-width: 0;
  border-bottom-width: 0;
  border-left-style: solid;
  border-bottom-style: solid;
  border-color: var(--toggleArrowColor, #fff);

  position: absolute;
  top: .5428em;
  left: .25em;
  z-index: 3;

  transform-origin: left top;
  transform: rotate(-40deg) skew(10deg);
}

.toggle__input:not(:disabled):checked ~ .toggle__label .toggle__text::before {
  --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);
  
  width: .4em;
  height: .2em;
  border-left-width: var(--uiToggleArrowWidth);
  border-bottom-width: var(--uiToggleArrowWidth);
}

/*
States
*/

/* disabled state */

.toggle__input:disabled ~ .toggle__label {
  opacity: var(--toggleOpacityDisabled, .24);
  cursor: var(--toggleCursorDisabled, not-allowed);
}

/*
=====
PRESENTATION STYLES
=====
*/

/* 
The demo skin
*/

.toggle__label::before, 
.toggle__label::after{
  border-radius: var(--toggleBorderRadius, 2px);
}

/* 
The animation of switching states
*/

.toggle__input:not(:disabled) ~ .toggle__label::before,
.toggle__input:not(:disabled) ~ .toggle__label::after {
  opacity: 1;
  transform-origin: center center;
  will-change: transform;
  transition: transform .2s ease-out;
}

.toggle__input:not(:disabled) ~ .toggle__label::before {
  transform: rotateY(0deg);
  transition-delay: .2s;
}

.toggle__input:not(:disabled) ~ .toggle__label::after {
  transform: rotateY(90deg);
}

.toggle__input:not(:disabled):checked ~ .toggle__label::before {
  transform: rotateY(-90deg);
  transition-delay: 0s;
}

.toggle__input:not(:disabled):checked ~ .toggle__label::after {
  transform: rotateY(0deg);
  transition-delay: .2s;
}

.toggle__text::before{
  opacity: 0;
}

.toggle__input:not(:disabled):checked ~ .toggle__label .toggle__text::before {
  opacity: 1;
  transition: opacity .1s ease-out .3s, width .1s ease-out .5s, height .2s ease-out .3s;
}

/*
=====
SETTINGS
=====
*/

.toggle {
  --toggleColor:#315f50;
  --toggleBackgroundColor: #9b59b6;
  --toggleSize: 25px;
}